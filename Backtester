import matplotlib.pyplot as plt
import numpy as np
import yfinance as yf
import pandas as pd
from scipy.signal import find_peaks
from datetime import timedelta as td
from Indicators import Indicators
from OrderTypes import Order_Chain, Stock, Option

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.width', None)


class Historicals(object):

    def __init__(self, symbol, period='1y', interval='60m'):

        self.symbol = symbol

        # valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
        # valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo

        ticker = yf.Ticker(self.symbol)
        self.history = ticker.history(period=period, interval=interval).reset_index()
        self.history.rename(columns={'Datetime': 'Date'}, inplace=True)
        self.history['Date'] = self.history['Date'].dt.tz_localize(None)

        self.avg_vol = self.history['Volume'].mean()
        self.returns = self.history['Close'].diff()
        self.cum_returns = self.history['Close'] - self.history['Close'].iloc[0]

        close = self.history['Close']
        log = np.log(close) - np.log(close.shift(1))
        st = log.dropna().ewm(span=252).std()
        self.volatility = st.iloc[-1]

        self.growth = close.iloc[-1] - close.iloc[0]
        self.pct_change = (close.iloc[-1] - close.iloc[0]) / close.iloc[0]


class Quant(object):

    def __init__(self, historicals, initial_capital=5000):

        self.symbol = historicals.symbol
        self.history = historicals.history
        self.benchmark_returns = historicals.cum_returns
        self.sigma = historicals.volatility
        self.indicators = Indicators(self.history)
        self.current_row = self.history.iloc[0]
        self.orders = Order_Chain()

        self.available_funds = initial_capital
        self.shares_owned = 0

        self.metrics = {'Shares Owned': list(), 'Balance': list(), 'Available Funds': list()}

    def entry(self, qty, when=True, long=True, qty_type='fixed', limit=0, stop=0, use_strike=0):

        p = self.current_row['Close'] if use_strike == 0 else use_strike

        if not np.isnan(p) and when:

            # qty_type affects how the default_qty_val is used
            #       if type = 'fixed', the value in the variable qty represents # of shares
            #       if type = 'cash', the value in the variable qty represents $
            #       if type = 'pct_of_equity', the value in the variable qty represents a % of whatever capital the strategy has at the time
            #       if type = 'target', the value in the variable qty represents the # of shares you ultimately want to own, regardless of the number of shares currently owned

            if qty_type == 'cash':
                shares = int(qty // p)
            elif qty_type == 'pct_of_equity':
                shares = int((self.available_funds * (float(qty) / 100)) // p)
            elif qty_type == 'target':
                shares = int(qty - self.shares_owned)
                long = False if shares < 0 else True
                shares = abs(shares)
            else:
                shares = int(qty)

            order = Stock(self.current_row, qty=shares, long=long, limit=limit, stop=stop, strike=use_strike)

            if order.qty != 0 and order.sufficient_funds(self.available_funds):
                if order.filled:
                    self.available_funds -= order.value()
                    self.shares_owned += order.qty if order.long else -order.qty
                self.orders.add_to_chain(order)

    def entry_option(self, strike, when=True, fridays_from_now=3, qty=100, is_call=True, write=False, expiration=None):

        if when:

            if expiration is None:
                expiration = self.find_valid_expiration(fridays_from_now)

            option = Option(self.current_row, strike, sigma=self.sigma, expiration=expiration,
                            qty=qty, is_call=is_call, long=(not write))

            if option.sufficient_funds(self.available_funds):
                self.orders.add_to_chain(option)
                self.available_funds -= option.value()

    def covered_call(self, strike, when=True, fridays_from_now=3, qty=100):

        if when and strike > self.current_row['Close']:

            self.entry(qty)
            self.entry_option(
                strike, fridays_from_now=fridays_from_now, qty=qty, write=True
            )

    def find_valid_expiration(self, fridays_from_now):

        current_date = self.current_row['Date']
        dates = self.history['Date']

        for idx in range(dates[dates == current_date].index[0], len(dates)):

            date = dates[idx]
            is_friday = date.weekday() == 4
            is_thursday = date.weekday() == 3

            if is_friday or (is_thursday and not (dates == (date + td(1))).any()):
                if fridays_from_now == 0:
                    return date.replace(hour=15, minute=30)
                else:
                    fridays_from_now -= 1

    def exit(self, order):
        if isinstance(order, Stock):
            self.entry(order.qty, long=(not order.long))
        else:
            self.entry_option(order.strike, expiration=order.expiration, qty=order.qty, 
                              is_call=order.is_call, write=order.long)

    def pl_ratio(self, ratio='2:1', target=3, target_as_pct=True):

        chain = self.orders.chain
        max_idx = len(chain)
        ratio = [float(j) for j in ratio.split(':')]
        ratio = ratio[0] / ratio[1]

        for order in chain[:max_idx]:

            try:
                if not order.filled:
                    continue
            except AttributeError:
                pass

            long = order.long
            p = order.price
            current_p = self.current_row['Close']

            if target_as_pct:
                take_profit = p * (1 + (target / 100. * (1 if long else -1)))
            else:
                take_profit = (p + target) if long else p - target

            cut_losses = (abs(take_profit - p) / ratio)
            cut_losses = p - cut_losses if long else p + cut_losses

            criteria1 = long and (current_p >= take_profit or current_p <= cut_losses)
            criteria2 = long is False and (current_p <= take_profit or current_p >= cut_losses)

            if (criteria1 or criteria2):
                self.exit(order)

    def refresh(self):

        current_date = self.current_row['Date']

        for order in self.orders.chain:

            try:
                order.calc_premium(self.current_row)
                if current_date > order.expiration:
                    self.orders.chain.remove(order)
                elif current_date == order.expiration:
                    self.excercise(order)

            except AttributeError:
                order.value_per_unit_of_qty = self.current_row['Close']
                if order.fill_order(self.current_row):
                    self.available_funds -= order.value()
                    self.shares_owned += order.qty if order.long else -order.qty

        self.metrics['Shares Owned'].append(self.shares_owned)
        self.metrics['Available Funds'].append(self.available_funds)
        self.metrics['Balance'].append(self.available_funds + self.orders.portfolio_value())
        
        try:
            self.current_row = self.history.iloc[self.history[self.history == self.current_row].index[0] + 1]
        except IndexError:
            pass

    def run_backtest(self):
        for idx in range(len(self.history)):
            self.current_row = self.history.iloc[idx]
            self.strategy(idx)
            self.refresh()
        return self.performance_analysis()

    def strategy(self, idx):
        pass

    def excercise(self, option):

        self.orders.chain.remove(option)
        current_close = self.current_row['Close']

        long = option.is_call
        if option.long is False:
            long = not long

        if (option.is_call and option.strike > current_close) or (not option.is_call and option.strike < current_close):
            self.entry(option.qty, long=long, use_strike=option.strike)
            self.entry(0, long=(not long), qty_type='target')

    def crossover(self, x, y):

        if not isinstance(x, pd.Series):
            x = pd.Series([x for _ in range(len(y))])
        elif not isinstance(y, pd.Series):
            y = pd.Series([y for _ in range(len(x))])

        return pd.DataFrame({0: x > y, 1: x.shift() <= y.shift()}).all(axis=1)

    def performance_analysis(self):

        metrics = pd.DataFrame(self.metrics)
        balance = metrics['Balance']

        metrics['Change in Shares Owned'] = metrics['Shares Owned'].diff()
        metrics['Returns'] = balance.diff()
        metrics['Pct Change'] = balance.pct_change()
        metrics['Cumulative Returns'] = metrics['Returns'].cumsum()
        metrics['Running Pct Change'] = pd.Series([(balance.iloc[i] - balance.iloc[0]) / balance.iloc[0] for i in range(len(balance))])
        metrics['Drawdown'] = (balance - balance.cummax()) / balance.cummax()
        metrics['Log Returns'] = np.log(balance).diff()

        trades = self.orders.calc_postrun_trade_stats()
        winners = trades[trades['Profit'] > 0]['Profit']
        losers = trades[trades['Profit'] <= 0]['Profit']

        gross_profit = winners.sum()
        gross_loss = losers.sum()
        nbr_of_trades = winners.count() + losers.count()

        if gross_loss != 0:
            profit_factor = (gross_profit / abs(gross_loss))
        else:
            profit_factor = np.NaN

        try:
            avg_days_held = round(trades['Days Held'].mean())
        except ValueError:
            avg_days_held = np.NaN

        if nbr_of_trades != 0:
            win_rate = round(winners.count() / nbr_of_trades * 100)
        else:
            win_rate = np.NaN

        # sharpe = self.returns.mean() / self.returns.std()
        # sortino = self.returns.mean() / np.sqrt(self.returns.apply(lambda x: x ** 2 if x < 0 else 0)).mean()

        performance = pd.DataFrame({'Gross Profit': gross_profit, 'Gross Loss': gross_loss,
                                    'Net PnL': gross_profit + gross_loss, 'Profit Factor': profit_factor,
                                    '% Growth': metrics['Running Pct Change'].iloc[-1],
                                    'Maximum Drawdown (%)': metrics['Drawdown'].min() * 100,
                                    'Average Days Held': avg_days_held, 'Total Closed Trades': nbr_of_trades,
                                    'Win Rate (%)': win_rate, '# of Winning Trades': winners.count(),
                                    '# of Losing Trades': winners.count(), 'Average Win': winners.mean(),
                                    'Largest Win': winners.max(), 'Average Loss': losers.mean(),
                                    'Largest Loss': losers.min()}, index=[0])

        return metrics, performance, trades

    def show_charts(self):

        fig, (ax1a, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(14, 7.5))

        ax1a.plot(self.metrics['Cumulative Returns'], color='blue')
        ax1a.plot(self.benchmark_returns, color='lightblue')
        ax1a.set_title('Cumulative Returns / Drawdown')

        drawdown = self.metrics['Drawdown']

        if not (drawdown[0] == drawdown).all():

            ax1b = ax1a.twinx()

            ax1b.set_ylim([drawdown.min() * 3, 0])
            ax1b.plot(drawdown, color='red')

        ax2.plot(self.metrics['Log Returns'])
        ax2.set_title('Log Returns')

        ax3.plot(self.metrics['Shares Owned'], color='darkviolet')
        ax3.set_title('Shares Owned')

        ax4.plot(self.metrics['Available Funds'], color='darkgreen')
        ax4.set_title('Available Funds')

        plt.tight_layout()
        plt.show()
